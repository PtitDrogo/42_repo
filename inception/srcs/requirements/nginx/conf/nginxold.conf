events {
    worker_connections 1024; 
}
#nginx uses a "workers" system where different types of workers works along side each other to achieve various tasks.
#this sets the limits of connection that each worker can manage.

#defining what is happening for an http connexion
http {
    include /etc/nginx/mime.types;
	#This line includes a file that maps file extensions to MIME types. It helps NGINX serve files with the correct Content-Type header.
    default_type application/octet-stream;
	#This sets the default MIME type for responses. If NGINX can't determine the type from the mime.types file, it uses this generic binary type.
    log_format my_custom_format '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"';
	
	#This defines a custom log format named my_custom_format. It specifies what information to include in the access logs.
    server{
        listen 80;
        server_name tfreydie.42.fr;
        return 404;
    }
	# we are telling our server to listen on port 80, port 80 is an http connexion, accessing tfreydie.42.fr is the same as connecting to port 80
    	#because http is not secure, we want to return a error 404, so that you can only connect to our server with a secure connection
    
    server {
        listen 443 ssl;
	#443 is secure http port;
        server_name tfreydie.42.fr;

        ssl_certificate_key /etc/nginx/certs/key.pem;
        ssl_certificate /etc/nginx/certs/cert.pem;
	#Telling nginx where to find the key and the certificate for ssl, which is used for https connection
        ssl_protocols TLSv1.2 TLSv1.3;
	#this is the protocol that we want the use as the subject's specification
        # error_log /var/log/nginx/error_log;
	# we define our variable error_log to be the errorlog native to nginx
        error_log /dev/stderr;
	#we redirect error log into the standar error stream
        access_log /var/log/nginx/access.log my_custom_format;
	#This configures where NGINX should write its access logs and which format to use (the custom format defined earlier).

        root /var/www/html;
	#This sets the root directory for requests. NGINX will look for files to serve relative to this directory.
        index index.php index.html index.htm;
	#all of the places it will look for an index.
        
        location /{
            try_files $uri $uri/ =404;
        }
	#uri is like part of an url, it checks the uri after the domain name, it tries to see if a file or a directory of that name exists. if not. error 404
        location ~ \.php$ {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass wordpress:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }
    	#all of the above is magic stuff sent to a php server so that nginx can work
    }
}
